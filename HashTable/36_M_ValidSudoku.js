/**
 * 04/16/21 evening
 * https://leetcode.com/problems/valid-sudoku/
 */

// Accepted --- 104ms 56.84%
const isValidSudoku = (b) => {
    let rev = [];
    for (let i = 0; i < 9; i++) {
        let tmp = [];
        for (let j = 0; j < 9; j++) {
            tmp.push(b[j][i]);
        }
        rev.push(tmp);
    }
    // pr(rev);
    if (!ok(b) || !ok(rev)) return 0;
    let d = [];
    for (const e of b) {
        for (let i = 0; i < 9; i += 3) {
            d.push(e.slice(i, i + 3));
        }
    }
    // pr(d);
    let res1 = [];
    let res2 = [];
    let res3 = [];
    for (let i = 0; i < d.length; i++) {
        if (i % 3 == 0) {
            res1.push(d[i]);
        } else if (i % 3 == 1) {
            res2.push(d[i]);
        } else if (i % 3 == 2) {
            res3.push(d[i]);
        }
    }
    // pr(res1);
    // pr(res2);
    // pr(res3);
    for (let i = 0; i < 9; i += 3) {
        let tmp1 = res1.slice(i, i + 3);
        let tmp2 = res2.slice(i, i + 3);
        let tmp3 = res3.slice(i, i + 3);
        // pr(tmp1);
        if (!ok3(tmp1) || !ok3(tmp2) || !ok3(tmp3)) return 0;
    }
    return 1;
}

const ok3 = (g) => {
    let res = [];
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            if (g[i][j] != '.') {
                res.push(g[i][j]);
            }
        }
    }
    // pr(res);
    return new Set(res).size == res.length;
};

const ok = (b) => {
    for (const e of b) {
        let a = e.filter(x => x != '.');
        // pr(a);
        if (new Set(a).size != a.length) return 0;
    }
    return 1;
};

const pr = console.log;
const main = () => {
    let board = [
        ["5", "3", ".", ".", "7", ".", ".", ".", "."],
        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
        [".", "9", "8", ".", ".", ".", ".", "6", "."],
        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
        [".", "6", ".", ".", ".", ".", "2", "8", "."],
        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
        [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    ];
    let board2 = [
        ["8", "3", ".", ".", "7", ".", ".", ".", "."],
        ["6", ".", ".", "1", "9", "5", ".", ".", "."],
        [".", "9", "8", ".", ".", ".", ".", "6", "."],
        ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
        ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
        ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
        [".", "6", ".", ".", ".", ".", "2", "8", "."],
        [".", ".", ".", "4", "1", "9", ".", ".", "5"],
        [".", ".", ".", ".", "8", ".", ".", "7", "9"]
    ];
    let debug1 = [
        [".", ".", ".", ".", "5", ".", ".", "1", "."],
        [".", "4", ".", "3", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "3", ".", ".", "1"],
        ["8", ".", ".", ".", ".", ".", ".", "2", "."],
        [".", ".", "2", ".", "7", ".", ".", ".", "."],
        [".", "1", "5", ".", ".", ".", ".", ".", "."],
        [".", ".", ".", ".", ".", "2", ".", ".", "."],
        [".", "2", ".", "9", ".", ".", ".", ".", "."],
        [".", ".", "4", ".", ".", ".", ".", ".", "."]
    ];
    pr(isValidSudoku(board));
    pr(isValidSudoku(board2));
    pr(isValidSudoku(debug1)); // false
};

main()