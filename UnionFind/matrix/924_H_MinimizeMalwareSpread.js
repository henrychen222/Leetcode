/**
 * 06/30/21 night
 * https://leetcode.com/problems/minimize-malware-spread/
 */

 function DJSet(n) {
    let parent = Array(n).fill(-1);
    let malware = Array(n).fill(0);
    return { find, union, updateMalware, getParent, getMalware }
    function find(x) {
        return parent[x] < 0 ? x : parent[x] = find(parent[x]);
    }
    function union(x, y) {
        x = find(x);
        y = find(y);
        if (x != y) {
            if (parent[x] < parent[y])[x, y] = [y, x];
            parent[x] += parent[y];
            parent[y] = x;
            malware[x] |= malware[y];
        }
        return x == y;
    }
    function updateMalware(pos, v) {
        malware[pos] = v;
    }
    function getParent() {
        return parent;
    }
    function getMalware() {
        return malware;
    }
}

// Accepted --- 260ms
const minMalwareSpread = (g, initial) => {
    let n = g.length;
    let infect = Array(n).fill(false);
    for (const e of initial) infect[e] = true;
    // pr(infect)
    let [min, idx] = [Number.MAX_SAFE_INTEGER, -1];
    for (let i = 0; i < n; i++) {
        if (infect[i]) {
            let ds = new DJSet(n);
            for (let j = 0; j < n; j++) {
                if (infect[j] && j != i) {
                    ds.updateMalware(j, true);
                }
            }
            for (let j = 0; j < n; j++) {
                for (let k = 0; k < n; k++) {
                    if (g[j][k] == 1) ds.union(j, k);
                }
            }
            let tot_infected = 0;
            for (let j = 0; j < n; j++) {
                if (ds.getParent()[j] < 0 && ds.getMalware()[j]) {
                    tot_infected += -ds.getParent()[j];
                }
            }
            if (tot_infected < min) {
                min = tot_infected;
                idx = i;
            }
            // pr(min, idx, ds.getParent(), ds.getMalware())
        }
    }
    return idx;
};

const pr = console.log;
const main = () => {
    let graph = [
            [1, 1, 0],
            [1, 1, 0],
            [0, 0, 1]
        ],
        initial = [0, 1];
    let graph2 = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ],
        initial2 = [0, 2];
    let graph3 = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]
        ],
        initial3 = [1, 2];
    let graph_debug1 = [
            [1, 0, 0, 0],
            [0, 1, 0, 0],
            [0, 0, 1, 1],
            [0, 0, 1, 1]
        ],
        initial_debug1 = [3, 1];
    pr(minMalwareSpread(graph, initial))
    pr(minMalwareSpread(graph2, initial2))
    pr(minMalwareSpread(graph3, initial3))
    pr(minMalwareSpread(graph_debug1, initial_debug1)) // 3
};

main()