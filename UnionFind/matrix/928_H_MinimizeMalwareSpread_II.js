/**
 * 08/31/21 night
 * https://leetcode.com/problems/minimize-malware-spread-ii/
 */

function DJSet(n) {
    // parent[i] < 0, -parent[i] is the group size which root is i. example: (i -> parent[i] -> parent[parent[i]] -> parent[parent[parent[i]]] ...)
    // parent[i] >= 0, i is not the root and parent[i] is i's parent. example: (... parent[parent[parent[i]]] -> parent[parent[i]] -> parent[i] -> i)
    let parent = Array(n).fill(-1);
    return { find, union, count, getParent }
    function find(x) {
        return parent[x] < 0 ? x : parent[x] = find(parent[x]);
    }
    function union(x, y) {
        x = find(x);
        y = find(y);
        if (x != y) {
            if (parent[x] < parent[y])[x, y] = [y, x];
            parent[x] += parent[y];
            parent[y] = x;
        }
        return x == y;
    }
    function count() { // total connected groups (value < 0)
        return parent.filter(v => v < 0).length;
    }
    function getParent() {
        return parent;
    }
}

// Accepted --- 281ms 6.67%
// reference: https://leetcode.com/contest/weekly-contest-107/ranking uwi
const minMalwareSpread = (g, initial) => {
    let n = g.length, min = Number.MAX_SAFE_INTEGER, idx = -1;
    initial.sort((x, y) => x - y);
    for (const e of initial) {
        let infect = Array(n).fill(false);
        let ds = new DJSet(n);
        for (let i = 0; i < n; i++) {
            for (let j = i + 1; j < n; j++) {
                if (i == e || j == e) continue;
                if (g[i][j] == 1) ds.union(i, j);
            }
        }
        for (const ini of initial) {
            if (ini != e) {
                let root = ds.find(ini);
                infect[root] = true;
            }
        }
        let tot_infected = 0;
        for (let i = 0; i < n; i++) {
            let root = ds.find(i);
            if (infect[root]) tot_infected++;
        }
        if (tot_infected < min) {
            min = tot_infected;
            idx = e;
        }
    }
    return idx;
};

const pr = console.log;
const main = () => {
    let graph = [
            [1, 1, 0],
            [1, 1, 0],
            [0, 0, 1]
        ],
        initial = [0, 1]
    let graph2 = [
            [1, 1, 0],
            [1, 1, 1],
            [0, 1, 1]
        ],
        initial2 = [0, 1];
    let graph3 = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial3 = [0,1];
    let graph_debug1 = [[1,1,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1]], initial_debug1 = [3,0]
    pr(minMalwareSpread(graph, initial))
    pr(minMalwareSpread(graph2, initial2))
    pr(minMalwareSpread(graph3, initial3))
    pr(minMalwareSpread(graph_debug1, initial_debug1)) // 0
};

main()