/**
 * 04/02/22 morning
 * https://leetcode.com/contest/biweekly-contest-75/problems/number-of-ways-to-select-buildings/
 */

const pr = console.log;

// Accepted --- reference: Heltion
const numberOfWays = (s) => op(s, '101') + op(s, '010')

const op = (s, t) => {
    let one = 0, two = 0, three = 0;
    for (const c of s) {
        if (c == t[2]) three += two;
        if (c == t[1]) two += one;
        if (c == t[0]) one++;
    }
    return three;
};

///////////////////////////////////////////////////////////////////////
function Bisect() {
    return { insort_right, insort_left, bisect_left, bisect_right }
    function insort_right(a, x, lo = 0, hi = null) {
        lo = bisect_right(a, x, lo, hi);
        a.splice(lo, 0, x);
    }
    function bisect_right(a, x, lo = 0, hi = null) { // > upper_bound
        if (lo < 0) throw new Error('lo must be non-negative');
        if (hi == null) hi = a.length;
        while (lo < hi) {
            let mid = parseInt((lo + hi) / 2);
            a[mid] > x ? hi = mid : lo = mid + 1;
        }
        return lo;
    }
    function insort_left(a, x, lo = 0, hi = null) {
        lo = bisect_left(a, x, lo, hi);
        a.splice(lo, 0, x);
    }
    function bisect_left(a, x, lo = 0, hi = null) { // >= lower_bound
        if (lo < 0) throw new Error('lo must be non-negative');
        if (hi == null) hi = a.length;
        while (lo < hi) {
            let mid = parseInt((lo + hi) / 2);
            a[mid] < x ? lo = mid + 1 : hi = mid;
        }
        return lo;
    }
}

let bi;
const numberOfWays1 = (s) => {
    let m0 = new Map(), m1 = new Map(), bi = new Bisect();
    let zero = [], one = [];
    for (let i = 0; i < s.length; i++) s[i] == '0' ? zero.push(i) : one.push(i);
    // pr(zero, one);
    for (const e of zero) { // find idx for zero
        let idx = bi.bisect_right(one, e);
        m0.set(e, idx);
    }
    for (const e of one) { // find idx for one
        let idx = bi.bisect_right(zero, e);
        m1.set(e, idx);
    }
    // pr(m0, m1);
    let res1 = cal(zero, one, m0, m1);
    let res2 = cal(one, zero, m1, m0);
    // pr(res1, res2)
    return res1 + res2;
};

// TLE
const cal = (zero, one, m0, m1) => {
    let res = 0;
    for (const i of zero) {
        let idx = m0.get(i);
        for (let j = idx; j < one.length; j++) {
            let k = m1.get(one[j]);
            let thirdType = zero.length - k;
            res += thirdType;
            // pr(i, one[j], zero[k], "thirdType", thirdType);
        }
    }
    return res;
};


// TLE
// const cal = (zero, one) => { // '010'  '101'
//     let res = 0, bi = new Bisect();
//     for (const i of zero) {
//         let idx = bi.bisect_right(one, i);
//         for (let j = idx; j < one.length; j++) {
//             let k = bi.bisect_right(zero, one[j]);
//             let thirdType = zero.length - k;
//             res += thirdType;
//             // pr(i, one[j], zero[k], "thirdType", thirdType);
//         }
//     }
//     return res;
// };

const main = () => {
    let s = "001101";
    let s2 = "11100"
    let debug
    let debug2 = "0001100100";
    pr(numberOfWays(s))
    pr(numberOfWays(s2))
    pr(numberOfWays(debug1)) // 10719654494
    pr(numberOfWays(debug2)) // 38
};

main()