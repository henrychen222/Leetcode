/**
 * 05/29/21 morning
 * https://leetcode.com/contest/biweekly-contest-53/problems/get-biggest-three-rhombus-sums-in-a-grid/
 */

const pr = console.log;

let n, m;
const getBiggestThree = (g) => {
    n = g.length;
    m = g[0].length;
    // pr(n, m);
    let res = new Set();
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < m; j++) {
            for (let edge = 1; edge <= Math.min(i, n - i - 1); edge++) {
                let sum = rhombus(i, j, g, edge);
                if (!sum) continue;
                res.add(sum);
            }
            // let tmp = rhombus(i, j, g);
            // if (tmp.length == 0) continue;
            // let [top, down, right] = [tmp[0], tmp[1], tmp[2]];
            // let sum = left + top + down + right;
            // pr("left", g[i][j], "top", top, "down", down, "right", right, sum);
            // res.push(sum);
        }
    }
    res = [...res];
    let lastRow = [...new Set(g[n - 1])];
    // pr(lastRow)
    res = res.concat(lastRow);
    res.sort((x, y) => y - x);
    // pr(res);
    return res.slice(0, 3);
};

// Accepted --- 244ms
const rhombus = (i, j, g, edge) => {
    if (j + edge * 2 >= m || i - edge < 0 || i + edge >= n) return 0;
    let [row, col, sum] = [i, j, 0];
    for (let t = 1; t <= edge; t++) {
        sum += g[row][col];
        row--;
        col++;
    }
    row = i - edge; // start from top
    col = j + edge;
    for (let t = 1; t <= edge; t++) {
        sum += g[row][col];
        row++;
        col++;
    }
    row = i; // start from right
    col = j + 2 * edge;
    for (let t = 1; t <= edge; t++) {
        sum += g[row][col];
        row++;
        col--;
    }
    row = i + edge; // start from down
    col = j + edge;
    for (let t = 1; t <= edge; t++) {
        sum += g[row][col];
        row--;
        col--;
    }
    return sum;
};

// Accepted --- 284ms
const sm = (a) => a.reduce(((x, y) => x + y), 0);
const rhombus2 = (i, j, g, edge) => {
    if (j + edge * 2 >= m || i - edge < 0 || i + edge >= n) return 0;
    let top = g[i - edge][j + edge];
    let down = g[i + edge][j + edge];
    let right = g[i][j + edge * 2];
    // pr("edge", edge, "left", g[i][j], "top", top, "down", down, "right", right);
    let [row, col] = [i, j];
    let path = [];
    for (let t = 1; t <= edge; t++) {
        path.push(g[row][col]);
        row--;
        col++;
    }
    // pr(path)
    row = i - edge; // start from top
    col = j + edge;
    for (let t = 1; t <= edge; t++) {
        path.push(g[row][col]);
        row++;
        col++;
    }
    // pr(path)
    row = i; // start from right
    col = j + 2 * edge;
    for (let t = 1; t <= edge; t++) {
        path.push(g[row][col]);
        row++;
        col--;
    }
    // pr(path)
    row = i + edge; // start from down
    col = j + edge;
    for (let t = 1; t <= edge; t++) {
        path.push(g[row][col]);
        row--;
        col--;
    }
    // pr("path", path, "sum", sm(path));
    return sm(path);
};

// const rhombus1 = (i, j, g) => {
//     if (j + 2 >= m || i - 1 < 0 || i + 1 >= n) return [];
//     let top = g[i - 1][j + 1];
//     let down = g[i + 1][j + 1];
//     let right = g[i][j + 2];
//     return [top, down, right];
// };

const main = () => {
    let grid = [[3, 4, 5, 1, 3], [3, 3, 4, 2, 3], [20, 30, 200, 40, 10], [1, 5, 5, 4, 1], [4, 3, 2, 2, 5]]
    let grid2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
    let grid3 = [[7, 7, 7]];
    let debug1 = [[20, 17, 9, 13, 5, 2, 9, 1, 5], [14, 9, 9, 9, 16, 18, 3, 4, 12], [18, 15, 10, 20, 19, 20, 15, 12, 11], [19, 16, 19, 18, 8, 13, 15, 14, 11], [4, 19, 5, 2, 19, 17, 7, 2, 2]];
    let debug2 = [[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], [65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], [32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], [16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096], [8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048], [4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], [2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512], [1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256], [512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128], [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64], [128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32], [64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16],
    [32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8], [16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4], [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2], [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1], [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], [65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], [32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], [16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096], [8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048], [4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024], [2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512], [1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256], [512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128], [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64], [128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32], [64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16], [32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8], [16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4], [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2], [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1], [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536], [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768], [65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384], [32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192], [16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096], [8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048], [4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024],
    [2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512], [1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256], [512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128], [256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64], [128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32], [64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16], [32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8], [16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4], [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2], [4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 1]];
    pr(getBiggestThree(grid))
    pr(getBiggestThree(grid2))
    pr(getBiggestThree(grid3))
    pr(getBiggestThree(debug1)) // [107,103,102]
    pr(getBiggestThree(debug2)) // [2490366,1818622,1781586]
};

main()


/*
20  17  9  13 5   2  9  1  5
14  9   9  9  16  18 3  4  12
18  15  10 20 19  20 15 12 11
19  16  19 18 8   13 15 14 11
4   19  5  2  19  17 7  2  2

*/