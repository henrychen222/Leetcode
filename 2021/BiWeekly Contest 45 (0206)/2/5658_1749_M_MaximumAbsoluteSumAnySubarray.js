/**
 * 2.6 morning
 * https://leetcode.com/contest/biweekly-contest-45/problems/maximum-absolute-sum-of-any-subarray/
 */

// // https://stackoverflow.com/questions/25965939/finding-minimal-absolute-sum-of-a-subarray
const maxAbsoluteSum3 = (nums) => {
    let n = nums.length;
    let pre = Array(n + 1).fill(0);
    let max = Number.MIN_SAFE_INTEGER;
    for (let i = 1; i < n; i++) {
        pre[i] = pre[i - 1] + nums[i - 1];
    }
    pre.sort((a, b) => a - b);
    console.log(pre);
    let sum = 0;
    for (let i = 1; i < n; i++) {
        sum = pre[i] - pre[i - 1];
        // min = Math.min(min, sum);
        max = Math.max(max, sum);
    }
    return max;
    // return min;
};

const maxAbsoluteSum2 = (A) => {
    return dfs(A, 0, 0);
};

const dfs = (A, i, sum) => {
    // console.log(i, sum)
    if (A.length == 0) return 0;
    if (A.length - 1 === i) {
        return Math.max(Math.abs(sum + A[i]), Math.abs(sum - A[i]));
    }
    let plus = Math.abs(dfs(A, i + 1, sum + A[i]));
    let minus = Math.abs(dfs(A, i + 1, sum - A[i]));
    return Math.max(plus, minus);
};


// TLE
const maxAbsoluteSum = (nums) => {
    let n = nums.length;
    let pre = preSum(nums, n);
    // console.log(pre);
    let res = 0;
    for (let i = 0; i < n; i++) {
        if (nums[i] >= 0) {
            for (let j = i; j < n; j++) {
                if (nums[j] >= 0) {
                    let sum = pre[j + 1] - pre[i];
                    // console.log(sub, sum);
                    let abSum = Math.abs(sum);
                    res = Math.max(res, abSum);
                }
            }
        } else {
            for (let j = i; j < n; j++) {
                if (nums[j] < 0) {
                    let sum = pre[j + 1] - pre[i];
                    let abSum = Math.abs(sum);
                    res = Math.max(res, abSum);
                }
            }
        }
    }
    return res;
};

const preSum = (a, n) => {
    let pre = [0];
    for (let i = 0; i < n; i++) {
        pre.push(pre[i] + a[i]);
    }
    return pre;
};

const main = () => {
    let nums = [1, -3, 2, 3, -4];
    let nums2 = [2, -5, 1, -4, 3, -2];
    // let debug1 = [5858, -7139, 360, 1209, 683, -7764, 4953, -8247, 8151, -9949, 4471, -4876, 4650, 9439, 7996, -2880, -8026, -271, -8238, 2613, -5869, -4702, 7210, 8056, 2817, 4498, 8290, 4036, -5284, 7726, -4650, -6669, -965, -7658, -4394, -1331, -2636, 8840, 377, -8508, 1813, 784, 4950, -8882, 5876, -6271, 9474, 3302, 6113, -7866, -2615, 4488, 9378, 5645, 3085, -4777, 418, 9308, -2174, 4613, 6035, 6348, 9087, -4040, -3616, 8653, 7317, -7484, -2812, 1698, -4696, -1159, 1025, 8283, -2739, 5715, -5075, 6769, -3731, -474, 7005, -1624, -8248, 782, 2792, -5344, -5191, -8337, 2657, 2207, 4359, 2044, 218, -8675, -971, 325, -1653, -9346, 9713, -5854, 3291, -1106, -1204, -1072, 3813, 9774, 9613, 9005, -742, 4903, -4808, 842, 6243, 9745, 1281, -2953, -7719, 1865, 5091, -4060, -7406, 2790, 7646, 3647, 3203, -703, -3406, -248, -4323, 3622, 7596, -7686, 274, -9916, 4017, 6726, -6734, -9521, -2786, 9005, 4821, -4686, -1350, 2102, -3039, 3751, -2619, -678, -3540, 8639, -1761, -4262, 2106, -5292, 324, 1932, -7594, -5627, -7302, -6638, -9444, -2689, 9587, -4096, 6157, 7318, -2768, 381, -691, -7273, 163, -7002, -8158, 8037, -6018, 644, -769, -5899, 8061, -6523, 3134, 5267, 2166, -8411, -6510, 7982, 136, 3789, 6268, -3221, 5040, 6040, -3831, 5182, -1792, -4944, -654, 3640, 3770, 9074, 6438, -7453, 8292, -6376, 2492, -1926, 6017, 2855, 9488, 3606, -4939, 5226, 9049, 1481, 7905, -9028, -6636, -5899, 1758, -1361, -5401, -6038, -6524, -9150, 4387, 1818, 8286, 4155, 9978, 241, 7594, -1769, -7379, -3531, 2022, 8283, 3755, -9837, 2709, 7992, -7351, 5043, -6896, 9273, 4633, 340, 6516, -4920, -8762, -5828, 7140, 1092, 3424, -2551, 2196, -401, 755, 2733, 5108, 5430, -1041, 860, -3627, -5267, -8088, -9614, 1057, 4485, -2805, -687, 655, 2458, -711, -4530, 175, -7774, 2401, 1819, -8390, -4302, -6539, -5351, 1504, 3657, 9299, -7783, 2943, -3683, 5817, -6289, -5386, 7090, -3617, 4552, -9004, -4305, -544, 2546, 2212, -8656, 5358, -8647, -7348, 3292, -2052, 5953, -2642, -9237, 9321, 6331, -9133, 1389, 9389, -6733, -3135, -5066, 9179, 6344, -7288, -2485, -7118, 5571, -6972, -6184, 963, 709, -1789, 4495, -7706, -7834, 19, 533, 1701, -2917, -5643, -6056, 3475, 2299, -2704, 1298, 2812, -7394, 7914, -5981, 3368, -1744, 8025, 7299, 2269, -4822, 5380, -4429, -8726, 4604, 745, 3675, -8095, -3850, -4946, 8169, -1488, 186, -4517, 9950, -4485, -7933, 8254, -7957, -9286, 3758, -6274, -579, -2828, -8517, -677, -9656, -5446, -5732, 8492, 478, 6141, -2810, -9078, -8927, 819, 9267, -9663, -7707, 8951, -3145, 765, 1234, 4670, 7217, 669, 6933, -8175, -7794, -2001, 6778, 7315, 5411, -338, 1652, -8674, -3875, 3679, -9050, 8689, -5127, -7445, 5147, -5090, -4508, -3107, -2315, 3743, 8201, -8612, -17, -8286, -4944, -8796, 1986, 1886, -1991, -502, -6363, 2094, -6697, 1381, 2198, -9713, 5713, 463, -7472, -2734, 6747, -4066, -4275, -1331, 7732, -1260, -50, 8909, -7955, -1279, 4895, 3047, -4715, 6426, -578, 7873, 1535, 808, -8019, 833, 1546, -2886, -3779, -455, -1361, 8899, -5194, -6333, -9697, 7842, -7331, -2355, 3463, 7668, -5650, -5807, -812, 9757, 5924, 1266, 1471, 88, 4836, -516, -8075, -7215, -6769, 939, -5764, 8434, -3898, -9428, 6413, 3484, -9339, 777, 2037, 7370, -120, -6320, 5343, -7172, -5780, -8012, -4308, -9405, 2172, -6753, 40, -8266, -4291, -3435, -6307, 8890, -310, -5078, -7714, -9823, -2180, -9832, 9600, 6655, -6544, 1788, -5920, 6627, 8327, 9622, 6799, -3524, -3664, 834, 4306, 4529, 1517, -5840, 9400, -1293, 7430, -8701, -4584, -7602, 2866, -206, -7436, -9352, -1877, 8149, 2676, -843, 930, 7288, -7797, 5658, 8628, -1558, -7869, 5566, -944, -4625, -8899, -7569, -3022, 5479, 8029, -2107, -4908, -8657, -8503, 5383, 3627, 9540, -7269, 3848, 7936, 1345, 5123, -9708, -9879, -7726, 8297, 5385, 7859, 4762, -3628, 7897, 8551, 5733, -9441, 1748, 1145, 89, -4245, 1696, -40, -2302, 5116, 2933, -4488, -154, -1009, 4839, 1340, 2039, 6408, 3240, -9609, 1418, -7552, -4423, 2454, 781, 5658, -6172, 4498, -6565, -689, 915, 8518, 1360, -9074, -7565, 4634, -4226, 8879, -8352, -935, 8316, 9885, 122, 8337, 4029, 2433, -3098, 8250, 3914, 3588, -6220, -3366, -3604, -9059, -8897, -5583, -2672, -146, -9668, 128, 9878, 6300, 894, 1403, -612, 6113, -9351, 3896, -186, -4208, 9995, -7022, -1900, 6269, -6201, 8619, -6676, 7086, -2474, -7512, 5025, 9673, 9654, -6684, -5760, -4512, 477, 5350, -6370, 9335, 378, -8624, 6460, 5095, -9332, -7715, -2807, 6034, -3321, 8109, -1284, 5310, -3019, 9382, -6722, -8471, 9136, 1105, -8113, -9852, -6794, 590, 3603, 9119, -8831, 5066, 806, -7367, -8824, 9256, 3560, -9666, -4649, -4287, -3704, 6954, -6527, 9107, -2223, 2815, 3114, -554, 3372, -9663, -2340, -3186, 1968, 5676, -6921, -699, 6606, 1120, -6105, -102, -2747, 9403, -1617, -2339, 8589, 221, 6727, -8358, 7243, -9290, 3062, -4963, -27, -8746, -4147, -4405, -1678, 5671, -723, -6714, -1351, -7547, -866, -208, 6594, -9583, -2100, 7018, 902, -9663, 3246, 4805, -6778, -1731, 7441, -526, 591, -5316, 1430, 4211, 8505, 2737, 9196, -8668, -1694, 1777, 7510, -413, 257, 3097, 2522, 3654, 7943, 8082, -5479, -8179, 5513, 6749, -4365, 5854, 4744, 4885, -2123, -1056, -2548, 4543, -1068, 1972, 1591, 4087, -3340, -5117, 4796, -7818, -2914, -9712, -5055, -4742, -1172, 3230, -4292, -262, 8128, -3332, 8565, -2312, 4456, 4403, 7093, -3551, 1044, -9506, 166, 801, -8703, -650, -4279, 4752, 8515, 3242, -8025, -8702, -5922, 5521, 4643, 9629, -6353, -7598, 9654, -7969, 4902, 7961, 8593, -8208, -6592, -3637, -5049, 7181, 7866, 4172, 2565, -9129, 391, -5845, 5205, -2326, -1374, 7177, 5641, -5907, -8108, 2050, 9994, -1736, 3337, 200, -5078, 3454, -9460, -609, -8706, 2971, -5723, 5325, -2326, 6100, -4318, -3075, -1892, 8451, 7959, 6124, -483, 5796, -1560, 314, -9519, 2823, 8827, -4918, 3884, 1807, -5092, -760, 493, -4631, 5993, -2363, 7567, -1639, -3153, 8671, 7695, 9502, -8830, 5179, 2694, 2743, -3515, -6504, -7596, 8109, 7309, 8514, -6318, 2879, 3856, -308, 9919, 5530, 4753, 9510, 3998, 2270, 1370, 10, -3655, -8845, 2934, -2373, 9375, 8576, -4333, -5450, 268, -3004, -4261, -6982, -6556, -2073, -4849, 5885, -9968, 5381, -1050, 897, 293, 6021, -8494, 5139, -5632, -716, -2048, -7123, -8567, 3036, -7416, -5004, 5361, -1486, -4164, -6931, 1493, 7999, 8111, -2093, 3260, 256, 4009, 1265, 1689, -3964, -9605, -2853, -5093, 5504, -1224, 1927, 1501, -1823, 4111, 523, 4438, -1363, -4523, 4325, 3825, -8894, -4458, 9223, 415, -1218, -9719, 4836, 6578, -8139, 4038, -1032, -6549, 4404, 5603, -8050];
    console.log(maxAbsoluteSum(nums));
    console.log(maxAbsoluteSum(nums2));
    // console.log(maxAbsoluteSum(debug1));
};

main()