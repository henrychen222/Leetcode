/**
 * 06/25/22 evening
 * https://leetcode.com/contest/weekly-contest-299/problems/maximum-score-of-spliced-array/
 */

const pr = console.log;

const sm = (a) => a.reduce(((x, y) => x + y), 0);
const cutMaxConsecutiveWithIndex = (as) => { let d = [], ia = [], l = 0, n = as.length; for (let i = 0; i + 1 < n; i++) { if (as[i + 1] != as[i]) { d.push(as.slice(l, i + 1)); ia.push([l, i]); l = i + 1; } } d.push(as.slice(l)); ia.push([l, n - 1]); return [d, ia]; };

// WA
let sub;
const maximumsSplicedArray = (a, b) => {
    pr("test", test(a, b));
    sub = new Set();
    op(a, b, '<=');
    op(a, b, '>=');
    // pr("sub", sub)
    let res = Math.max(sm(a), sm(b));
    // pr(a, b);
    for (const s of sub) {
        let [l, r] = s.split(" ").map(Number);
        let [A, B] = swap(a, b, l, r);
        let sumA = sm(A), sumB = sm(B), t = Math.max(sumA, sumB);
        // pr([l, r], A, sumA, B, sumB, "t", t);
        res = Math.max(res, t);
    }
    return res;
};

const test = (a, b) => {
    let n = a.length, res = Number.MIN_SAFE_INTEGER;
    for (let l = 0; l < n; l++) {
        for (let r = l; r < n; r++) {
            let [A, B] = swap(a, b, l, r);
            let sumA = sm(A), sumB = sm(B), t = Math.max(sumA, sumB);
            res = Math.max(res, t);
        }
    }
    return res;
};

const op = (a, b, need) => {
    let mark = [], n = a.length;
    if (need == '<=') {
        for (let i = 0; i < n; i++) mark.push(a[i] <= b[i] ? need : '*');
    } else {
        for (let i = 0; i < n; i++) mark.push(a[i] >= b[i] ? need : '*');
    }
    let [d, ia] = cutMaxConsecutiveWithIndex(mark);
    // pr(need, d);
    let max = 0, len = d.length;
    for (let i = 0; i < len; i++) {
        if (d[i][0] == need) max = Math.max(max, d[i].length);
    }
    for (let i = 0; i < len; i++) {
        if (d[i][0] == need && d[i].length == max) {
            let [l, r] = ia[i];
            sub.add(l + " " + r);
        }
    }
};

const swap = (a, b, l, r) => {
    let A = [...a], B = [...b];
    for (let i = l; i <= r; i++) [A[i], B[i]] = [B[i], A[i]];
    return [A, B];
};

const main = () => {
    let a = [60, 60, 60], b = [10, 90, 10];
    let a2 = [20, 40, 20, 70, 30], b2 = [50, 20, 50, 40, 20];
    let a3 = [7, 11, 13], b3 = [1, 1, 1];
    let a_debug1 = [4809,8594,8978,7184,9040,6939,8576,938,6799,5236,757,23,8225,8715,9231,6986,4715,8673,8014,1275,499,9481,9078,1556,7037,2135,9442,6825,6083,6081,2060,1952,3000,5753,5831,8601,2548,8019,4371,4082,4014,6207,8246,7969,7360,3057,7212,1931,7243,2516,3496,1905,7026,2296,5610,7640,6000,4879,1311,6302,3701,8871,7851,7570,355,2246,463,7748,5686,330,7179,4623,1145,8485,5848,8640,5490,7816,6760,9039,8085,4459,8463,9603,4572,2404,2617,7300,8813,7621,4463,2970,6505,5654,3829,6505,9540,5169,9618,3352,6050,1944,883,5998,1656,8465,8488,493,2651,4095,1774,2795,7858,4290,5730,803,5989,8047,1392,7531,5055,9369,9993,7635,9758,4972,8523,7039,9818,3074,3896,6026,2320,2123,9188,5626,4132,7981,1036,9877,3137,955,6775,4483,9255,1823,2963,2722,2418,6746,2051,7762,264,3738,6944,3410,643,1270,825,859,8198,5127,6451,1730,9265,2408,4614,7310,7788,6313,2513,8302,5817,8212,572,3326,6167,1175,514,7881,9671,4847,3504,7266,2957,6761,2372,9319,3603,9959,8828,1199,6527,2325,5274,6841,3970,9129,3610,142], 
    b_debug1 = [1856,8909,8660,2978,1555,2203,308,796,1338,5402,4400,9503,2335,5013,2007,352,4535,3533,9268,8708,4574,1980,7803,8772,413,2145,6646,6579,909,5014,2234,8753,2959,5660,9062,4696,5221,7278,919,9197,5225,9821,754,6487,7643,972,2051,5464,9326,9887,1178,8910,5317,5903,4418,8789,3015,7735,2996,7457,5028,7445,3203,2950,4316,4435,2650,2886,9920,3159,88,9586,3572,5399,501,4385,223,8650,7301,1742,4,5644,3632,7214,267,30,3831,4980,8785,7208,9728,8400,982,5164,2911,2173,4062,9103,6730,5879,4610,2512,4947,4381,9492,3241,4367,2884,4246,1387,7926,2257,1372,4429,1497,9427,308,692,3462,5269,67,8072,670,6579,1215,8639,2891,7207,8096,1382,7515,2574,8996,8212,5763,9882,5837,5166,7207,2830,93,8831,4210,6658,6416,742,1909,6964,3115,3243,8376,4188,1753,9082,8895,720,2155,795,9548,7705,6206,1730,6187,8687,7152,6443,660,9267,4927,6387,4928,3622,8591,2838,3314,6762,1561,8710,9162,6546,3131,9734,4538,3273,7892,5682,7525,8544,4166,1018,7758,7942,4330,5602,7856,2842,4567,7998,6467,6710]
    pr(maximumsSplicedArray(a, b))
    pr(maximumsSplicedArray(a2, b2))
    pr(maximumsSplicedArray(a3, b3))
    pr(maximumsSplicedArray(a_debug1, b_debug1)) // 1114552
};

main()